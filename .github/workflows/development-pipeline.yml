name: CI/CD Workflow

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Fix Dependencies issues
      run: |
        sed -i '1 s/from django.conf.urls import url/from django.urls import re_path as url/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/urls.py
        sed -i '9 s/ugettext_lazy/gettext_lazy/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/views.py 
        sed -i '6 s/ugettext_lazy/gettext_lazy/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/serializers.py
        sed -i '7 s/force_text/force_str/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/serializers.py
        sed -i '2 s/from django.conf.urls import url/from django.urls import re_path as url/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/registration/urls.py
        sed -i '3 s/ugettext_lazy/gettext_lazy/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/registration/views.py
        sed -i '2 s/ugettext_lazy/gettext_lazy/g' $LD_LIBRARY_PATH/python3.11/site-packages/rest_auth/registration/serializers.py

    - name: Run Tests
      run: |
        python backend/manage.py test

  setup_database:
    runs-on: ubuntu-latest

    needs: build

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - "5432:5432"
        # options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    # - name: Wait for PostgreSQL to be ready
    #   run: dockerize -wait tcp://localhost:5432 -timeout 1m

    - name: Run Database Migrations
      run: |
        docker build -t Agileboard -f ./Dockerfile .
        docker run --rm -e DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }} backend python backend/manage.py migrate
